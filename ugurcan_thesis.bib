@misc{docker,
	title = {Docker},
	url = "\url{https://www.docker.com/}",
	abstract = {Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.},
	urldate = {2017-12-29},
	journal = {Docker},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/TQQ94E36/www.docker.com.html:text/html}
}

@misc{docker_hub,
	title = {Docker Hub},
	url = "\url{https://hub.docker.com/explore/}",
	urldate = {2017-12-29},
	file = {Explore - Docker Hub:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/UHJTHJ37/explore.html:text/html}
}

@misc{kubernetes,
	title = {Kubernetes},
	url = "\url{https://kubernetes.io/}",
	abstract = {Production-Grade Container Orchestration},
	urldate = {2017-12-29},
	journal = {Kubernetes},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/CHCIGLW6/kubernetes.io.html:text/html}
}

@misc{cncf,
	title = {Cloud Native Computing Foundation},
	url = "\url{https://www.cncf.io/}",
	urldate = {2017-12-29},
	journal = {Cloud Native Computing Foundation},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/ANS7XHD2/www.cncf.io.html:text/html}
}

@article{kolyshkin_virtualization_2006,
	title = {Virtualization in linux},
	volume = {3},
	url = "\url{http://mirror.ihc.ru/download.openvz.org/doc/openvz-intro.pdf}",
	journal = {White paper, OpenVZ},
	author = {Kolyshkin, Kirill},
	year = {2006},
	pages = {39}
}

@inproceedings{raft,
	title = {In search of an understandable consensus algorithm.},
	booktitle = {{USENIX} {Annual} {Technical} {Conference}},
	author = {Ongaro, Diego and Ousterhout, John K.},
	year = {2014},
	pages = {305--319}
}

@misc{wired_kubernetes,
	title = {Google {Open} {Sources} {Its} {Secret} {Weapon} in {Cloud} {Computing}},
	url = "\url{https://www.wired.com/2014/06/google-kubernetes/}",
	abstract = {When Google engineers John Sirois, Travis Crawford, and Bill Farner left the internet giant and went to work for Twitter, they missed Borg. Borg was the sweeping software system that managed the thousands of computer servers underpinning Google’s online empire. With Borg, Google engineers could instantly grab enormous amounts of computing power from across the {\textbackslash}[…{\textbackslash}]},
	urldate = {2017-12-29},
	journal = {WIRED},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/E5FT2D5P/google-kubernetes.html:text/html}
}

@misc{techcrunch_kubernetes,
	title = {As {Kubernetes} {Hits} 1.0, {Google} {Donates} {Technology} {To} {Newly} {Formed} {Cloud} {Native} {Computing} {Foundation}},
	url = "\url{http://social.techcrunch.com/2015/07/21/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundation-with-ibm-intel-twitter-and-others/}",
	abstract = {Kubernetes, the open-source container management tool Google launched last February, hit version 1.0 today. With this update, Google now considers Kubernetes..},
	urldate = {2017-12-29},
	journal = {TechCrunch},
	author = {Lardinois, Frederic},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/RNAEYJHI/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundat.html:text/html}
}

@misc{linux_foundation,
	title = {Linux Foundation},
	url = "\url{https://www.linuxfoundation.org/}",
	abstract = {We are the organization of choice for building sustainable open source ecosystems.},
	urldate = {2017-12-29},
	journal = {The Linux Foundation},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/QEYB6YHP/www.linuxfoundation.org.html:text/html}
}

@manual{sfc,
	title = {Service {Function} {Chaining} ({SFC}) {Architecture}},
	url = "\url{https://tools.ietf.org/html/rfc7665}",
	urldate = {2017-12-29},
	organization = {Internet Engineering Task Force},
	author = {Pignataro, Carlos and Halpern, Joel},
	month = oct,
	year = {2015},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/ZM4ZUTRP/rfc7665.html:text/html}
}

@manual{nsh,
	title = {Network {Service} {Header} ({NSH})},
	url = "\url{https://tools.ietf.org/id/draft-ietf-sfc-nsh-17.html}",
	abstract = {This document describes a Network Service Header (NSH) inserted onto packets or frames to realize service function paths.  NSH also provides a mechanism for metadata exchange along the instantiated service paths.  NSH is the SFC encapsulation required to support the Service Function Chaining (SFC) architecture (defined in RFC7665).},
	urldate = {2017-12-29},
	author = {Quinn, P.},
	month = jul,
	year = {2017},
	organization = {Internet Engineering Task Force},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/IFFWAF8I/draft-ietf-sfc-nsh-17.html:text/html}
}

@misc{openstack,
	title = {Home - {OpenStack} {Open} {Source} {Cloud} {Computing} {Software}},
	url = "\url{https://www.openstack.org/}",
	abstract = {OpenStack software controls large pools of compute, storage, and networking resources throughout a datacenter, managed through a dashboard or via the OpenStack API.},
	urldate = {2017-12-29},
	journal = {OpenStack},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/NZ4PYQS3/www.openstack.org.html:text/html}
}

@misc{lxc,
	title = {Linux {Containers}},
	url = "\url{https://linuxcontainers.org/}",
	urldate = {2017-12-29},
	file = {Linux Containers:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/3W4QDUX6/linuxcontainers.org.html:text/html}
}

@misc{dpdk,
	title = {Data {Plane} {Development} {Kit}},
	url = "\url{https://dpdk.org/}",
	urldate = {2017-12-29},
}

@misc{apache_mesos,
	title = {Apache {Mesos}},
	url = "\url{http://mesos.apache.org/}",
	abstract = {Apache Mesos abstracts resources away from machines,
                   enabling fault-tolerant and elastic distributed systems
                   to easily be built and run effectively.},
	urldate = {2017-12-29},
	journal = {Apache Mesos},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/FD5XBFCA/mesos.apache.org.html:text/html}
}

@misc{docker_swarm,
	title = {Swarm mode overview},
	url = "\url{https://docs.docker.com/engine/swarm/}",
	abstract = {Docker Engine swarm mode overview},
	urldate = {2017-12-29},
	journal = {Docker Documentation},
	month = dec,
	year = {2017},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/FX3USSK5/swarm.html:text/html}
}

@misc{coreos,
	title = {{CoreOS}},
	url = "\url{https://coreos.com/}",
	abstract = {Choose CoreOS as your partner in container adoption. We provide Container Linux, Tectonic for Kubernetes, and Quay Enterprise container registry.},
	urldate = {2017-12-29},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/NIUY2J6I/coreos.com.html:text/html}
}

@misc{crio,
	title = {cri-o},
	url = "\url{http://cri-o.io/}",
	urldate = {2017-12-29},
	file = {cri-o:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/LSE7GYB5/cri-o.io.html:text/html}
}

@misc{rkt,
	title = {rkt is a pod-native container engine for {Linux}. {It} is composable, secure, and built on standards},
	copyright = {Apache-2.0},
	url = "\url{https://github.com/rkt/rkt}",
	urldate = {2017-12-29},
	publisher = {rkt},
	month = dec,
	year = {2017},
	note = {original-date: 2014-11-11T23:13:18Z},
	keywords = {cncf, containers, go, oci, pods, rkt},
	file = {Snapshot:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/XDHI8KQ9/rkt.html:text/html}
}

@inproceedings{singh_containers_2016,
	title = {Containers {Docker}: {Emerging} roles future of {Cloud} technology},
	shorttitle = {Containers {Docker}},
	doi = {10.1109/ICATCCT.2016.7912109},
	abstract = {Summary form only given. Strong light-matter coupling has been recently successfully explored in the GHz and THz [1] range with on-chip platforms. New and intriguing quantum optical phenomena have been predicted in the ultrastrong coupling regime [2], when the coupling strength Ω becomes comparable to the unperturbed frequency of the system ω. We recently proposed a new experimental platform where we couple the inter-Landau level transition of an high-mobility 2DEG to the highly subwavelength photonic mode of an LC meta-atom [3] showing very large Ω/ωc = 0.87. Our system benefits from the collective enhancement of the light-matter coupling which comes from the scaling of the coupling Ω ∝ √n, were n is the number of optically active electrons. In our previous experiments [3] and in literature [4] this number varies from 104-103 electrons per meta-atom. We now engineer a new cavity, resonant at 290 GHz, with an extremely reduced effective mode surface Seff = 4 × 10-14 m2 (FE simulations, CST), yielding large field enhancements above 1500 and allowing to enter the few ({\textless};100) electron regime. It consist of a complementary metasurface with two very sharp metallic tips separated by a 60 nm gap (Fig.1(a, b)) on top of a single triangular quantum well. THz-TDS transmission experiments as a function of the applied magnetic field reveal strong anticrossing of the cavity mode with linear cyclotron dispersion. Measurements for arrays of only 12 cavities are reported in Fig.1(c). On the top horizontal axis we report the number of electrons occupying the topmost Landau level as a function of the magnetic field. At the anticrossing field of B=0.73 T we measure approximately 60 electrons ultra strongly coupled (Ω/ω- {\textbar}{\textbar}},
	booktitle = {2016 2nd {International} {Conference} on {Applied} and {Theoretical} {Computing} and {Communication} {Technology} ({iCATccT})},
	author = {Singh, S. and Singh, N.},
	month = jul,
	year = {2016},
	keywords = {Cloud computing, virtualisation, Virtual machining, docker, Bluemix, Carina, Cloud, cloud computing, Cloud Foundry, cloud technology, container-based virtualization, Containers, CoreOS, Docker, guest virtual machines, hardware node, Hyper-V Containers, Hypervisor, Kernel, Kubernetes, Linux, operating system kernels, operating system virtualization, virtual machines, Virtualization, VMs, Windows Server Containers},
	pages = {804--807},
	file = {IEEE Xplore Abstract Record:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/LB82YFJ2/7912109.html:text/html}
}

@inproceedings{joy_performance_2015,
	title = {Performance comparison between {Linux} containers and virtual machines},
	doi = {10.1109/ICACEA.2015.7164727},
	abstract = {Summary form only given. Strong light-matter coupling has been recently successfully explored in the GHz and THz [1] range with on-chip platforms. New and intriguing quantum optical phenomena have been predicted in the ultrastrong coupling regime [2], when the coupling strength Ω becomes comparable to the unperturbed frequency of the system ω. We recently proposed a new experimental platform where we couple the inter-Landau level transition of an high-mobility 2DEG to the highly subwavelength photonic mode of an LC meta-atom [3] showing very large Ω/ωc = 0.87. Our system benefits from the collective enhancement of the light-matter coupling which comes from the scaling of the coupling Ω ∝ √n, were n is the number of optically active electrons. In our previous experiments [3] and in literature [4] this number varies from 104-103 electrons per meta-atom. We now engineer a new cavity, resonant at 290 GHz, with an extremely reduced effective mode surface Seff = 4 × 10-14 m2 (FE simulations, CST), yielding large field enhancements above 1500 and allowing to enter the few ({\textless};100) electron regime. It consist of a complementary metasurface with two very sharp metallic tips separated by a 60 nm gap (Fig.1(a, b)) on top of a single triangular quantum well. THz-TDS transmission experiments as a function of the applied magnetic field reveal strong anticrossing of the cavity mode with linear cyclotron dispersion. Measurements for arrays of only 12 cavities are reported in Fig.1(c). On the top horizontal axis we report the number of electrons occupying the topmost Landau level as a function of the magnetic field. At the anticrossing field of B=0.73 T we measure approximately 60 electrons ultra strongly coupled (Ω/ω- {\textbar}{\textbar}},
	booktitle = {2015 {International} {Conference} on {Advances} in {Computer} {Engineering} and {Applications}},
	author = {Joy, A. M.},
	month = mar,
	year = {2015},
	keywords = {virtualisation, Scalability, Servers, Virtual machining, docker, containers, cloud computing, Containers, Linux, virtual machines, Virtualization, hardware resource utilization, hypervisor, kubernetes, Linux containers, resource overhead, Virtual machine monitors, virtualization, virtualization technologies, virtualized environments},
	pages = {342--346},
	file = {IEEE Xplore Abstract Record:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/9YHWDC6D/7164727.html:text/html}
}

@inproceedings{adufu_is_2015,
	title = {Is container-based technology a winner for high performance scientific applications?},
	doi = {10.1109/APNOMS.2015.7275379},
	abstract = {Summary form only given. Strong light-matter coupling has been recently successfully explored in the GHz and THz [1] range with on-chip platforms. New and intriguing quantum optical phenomena have been predicted in the ultrastrong coupling regime [2], when the coupling strength Ω becomes comparable to the unperturbed frequency of the system ω. We recently proposed a new experimental platform where we couple the inter-Landau level transition of an high-mobility 2DEG to the highly subwavelength photonic mode of an LC meta-atom [3] showing very large Ω/ωc = 0.87. Our system benefits from the collective enhancement of the light-matter coupling which comes from the scaling of the coupling Ω ∝ √n, were n is the number of optically active electrons. In our previous experiments [3] and in literature [4] this number varies from 104-103 electrons per meta-atom. We now engineer a new cavity, resonant at 290 GHz, with an extremely reduced effective mode surface Seff = 4 × 10-14 m2 (FE simulations, CST), yielding large field enhancements above 1500 and allowing to enter the few ({\textless};100) electron regime. It consist of a complementary metasurface with two very sharp metallic tips separated by a 60 nm gap (Fig.1(a, b)) on top of a single triangular quantum well. THz-TDS transmission experiments as a function of the applied magnetic field reveal strong anticrossing of the cavity mode with linear cyclotron dispersion. Measurements for arrays of only 12 cavities are reported in Fig.1(c). On the top horizontal axis we report the number of electrons occupying the topmost Landau level as a function of the magnetic field. At the anticrossing field of B=0.73 T we measure approximately 60 electrons ultra strongly coupled (Ω/ω- {\textbar}{\textbar}},
	booktitle = {2015 17th {Asia}-{Pacific} {Network} {Operations} and {Management} {Symposium} ({APNOMS})},
	author = {Adufu, T. and Choi, J. and Kim, Y.},
	month = aug,
	year = {2015},
	keywords = {virtualisation, Servers, Containers, Docker, virtual machines, Virtualization, application program interfaces, autodock3, Cloud Computing, Container-Based Technology, Container-based virtualization, High Performance Computing (HPC), high performance computing application, high performance scientific application, HPC application, Hypervisor-based virtualization (HPV), Memory management, molecular modeling simulation software, OpenStack, Operating systems, parallel processing, Protein-ligand docking, Random access memory, resource allocation, Resource management, virtualization technology},
	pages = {507--510},
	file = {IEEE Xplore Abstract Record:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/MII39GDU/7275379.html:text/html}
}

@article{boettiger_introduction_2015,
	title = {An {Introduction} to {Docker} for {Reproducible} {Research}},
	volume = {49},
	issn = {0163-5980},
	url = {http://doi.acm.org/10.1145/2723872.2723882},
	doi = {10.1145/2723872.2723882},
	abstract = {As computational work becomes more and more integral to many aspects of scientific research, computational reproducibility has become an issue of increasing importance to computer systems researchers and domain scientists alike. Though computational reproducibility seems more straight forward than replicating physical experiments, the complex and rapidly changing nature of computer environments makes being able to reproduce and extend such work a serious challenge. In this paper, I explore common reasons that code developed for one research project cannot be successfully executed or extended by subsequent researchers. I review current approaches to these issues, including virtual machines and workflow systems, and their limitations. I then examine how the popular emerging technology Docker combines several areas from systems research - such as operating system virtualization, cross-platform portability, modular re-usable elements, versioning, and a 'DevOps' philosophy, to address these challenges. I illustrate this with several examples of Docker use with a focus on the R statistical environment.},
	number = {1},
	urldate = {2017-12-29},
	journal = {SIGOPS Oper. Syst. Rev.},
	author = {Boettiger, Carl},
	month = jan,
	year = {2015},
	pages = {71--79}
}

@article{thones_microservices_2015,
	title = {Microservices},
	volume = {32},
	issn = {0740-7459},
	doi = {10.1109/MS.2015.11},
	abstract = {Summary form only given. Strong light-matter coupling has been recently successfully explored in the GHz and THz [1] range with on-chip platforms. New and intriguing quantum optical phenomena have been predicted in the ultrastrong coupling regime [2], when the coupling strength Ω becomes comparable to the unperturbed frequency of the system ω. We recently proposed a new experimental platform where we couple the inter-Landau level transition of an high-mobility 2DEG to the highly subwavelength photonic mode of an LC meta-atom [3] showing very large Ω/ωc = 0.87. Our system benefits from the collective enhancement of the light-matter coupling which comes from the scaling of the coupling Ω ∝ √n, were n is the number of optically active electrons. In our previous experiments [3] and in literature [4] this number varies from 104-103 electrons per meta-atom. We now engineer a new cavity, resonant at 290 GHz, with an extremely reduced effective mode surface Seff = 4 × 10-14 m2 (FE simulations, CST), yielding large field enhancements above 1500 and allowing to enter the few ({\textless};100) electron regime. It consist of a complementary metasurface with two very sharp metallic tips separated by a 60 nm gap (Fig.1(a, b)) on top of a single triangular quantum well. THz-TDS transmission experiments as a function of the applied magnetic field reveal strong anticrossing of the cavity mode with linear cyclotron dispersion. Measurements for arrays of only 12 cavities are reported in Fig.1(c). On the top horizontal axis we report the number of electrons occupying the topmost Landau level as a function of the magnetic field. At the anticrossing field of B=0.73 T we measure approximately 60 electrons ultra strongly coupled (Ω/ω- {\textbar}{\textbar}},
	number = {1},
	journal = {IEEE Software},
	author = {Thönes, J.},
	month = jan,
	year = {2015},
	keywords = {architecture, enterprise service bus, http, Interviews, microservice, SE Radio, Service oriented architecture, service-oriented architecture, Software architecture, software engineering, Software engineering},
	pages = {116--116},
	file = {IEEE Xplore Abstract Record:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/JFAIYWDL/7030212.html:text/html;IEEE Xplore Full Text PDF:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/D7XDCM3P/Thönes - 2015 - Microservices.pdf:application/pdf}
}

@article{burns_borg_2016,
	title = {Borg, {Omega}, and {Kubernetes}},
	volume = {59},
	issn = {0001-0782},
	url = {http://doi.acm.org/10.1145/2890784},
	doi = {10.1145/2890784},
	abstract = {Lessons learned from three container-management systems over a decade.},
	number = {5},
	urldate = {2017-12-29},
	journal = {Commun. ACM},
	author = {Burns, Brendan and Grant, Brian and Oppenheimer, David and Brewer, Eric and Wilkes, John},
	month = apr,
	year = {2016},
	pages = {50--57},
	file = {ACM Full Text PDF:/home/mirai/.mozilla/firefox/lkrhmoqp.default/zotero/storage/V33PLSFI/Burns et al. - 2016 - Borg, Omega, and Kubernetes.pdf:application/pdf}
}

@misc{oasis,
	title = {{OASIS} {\textbar} Advancing open standards for the information society},
	url = "\url{https://www.oasis-open.org/}",
	urldate = {2016-12-30},
	file = {OASIS | Advancing open standards for the information society:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/JQMTTNBF/www.oasis-open.org.html:text/html}
}

@misc{oasis_tosca,
	title = {{OASIS} Topology and Orchestration Specification for Cloud Applications ({TOSCA}) {TC} {\textbar} {OASIS}},
	url = "\url{https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=tosca}",
	urldate = {2016-12-30},
	file = {OASIS Topology and Orchestration Specification for Cloud Applications (TOSCA) TC | OASIS:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/W3MZQW2C/tc_home.html:text/html}
}

@misc{tosca_nfv,
	title = {{TOSCA} Simple Profile for Network Functions Virtualization ({NFV}) Version 1.0},
	url = "\url{https://docs.oasis-open.org/tosca/tosca-nfv/v1.0/tosca-nfv-v1.0.html}",
	urldate = {2016-12-30},
	file = {TOSCA Simple Profile for Network Functions Virtualization (NFV) Version 1.0:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/24R4J3KX/tosca-nfv-v1.0.html:text/html}
}

@misc{tacker,
	title = {Tacker - {OpenStack}},
	url = "\url{https://wiki.openstack.org/wiki/Tacker}",
	urldate = {2016-12-30},
	file = {Tacker - OpenStack:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/MB59TDA7/Tacker.html:text/html}
}

@manual{etsi_nfvman,
	title = {ETSI Standard GS NFV-MAN 001},
	url = "\url{https://portal.etsi.org/webapp/workprogram/Report_WorkItem.asp?WKI_ID=41954}",
	urldate = {2016-12-30},
	month = dec,
	year = {2014},
	organization = {European Telecommunications Standards Institute},
	file = {Work Programme - Work Item Detailed Report:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/W75DDCHR/Report_WorkItem.html:text/html}
}

@manual{etsi_nfv,
	title = {ETSI Standard GS NFV 002},
	url = "\url{https://portal.etsi.org/webapp/workprogram/Report_WorkItem.asp?WKI_ID=43827}",
	urldate = {2016-12-30},
	month = oct,
	year = {2013},
	organization = {European Telecommunications Standards Institute},
	file = {Work Programme - Work Item Detailed Report:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/33BD3VHE/Report_WorkItem.html:text/html}
}

@book{chayapathi_network_2016,
	title = {Network Functions Virtualization ({NFV}) with a Touch of {SDN}},
	isbn = {978-0-13-446305-6},
	url = "\url{http://proquestcombo.safaribooksonline.com/book/networking/9780134464312}",
	abstract = {Network Functions Virtualization ({NFV}) will drive dramatic cost reductions while also accelerating service delivery. Using {NFV} with {SDN}, network owners can provision new functions rapidly on demand, improve scalability, and leverage microservices. Benefits like these will make {NFV} indispensable for service providers, mobile operators, telcos, and enterprises alike.Network Functions Virtualization ({NFV}) with a Touch of {SDN} is the first practical introduction to {NFV}’s fundamental concepts, techniques, and use cases. Written for wide audiences of network engineers, architects, planners, and operators, it assumes no previous knowledge of {NFV} architecture, deployment, or management.The authors first explain how virtualization, {VMs}, containers, and related technologies establish the foundation for the {NFV} transformation. Next, they show how these concepts and technologies can be applied to virtualize network functions in the cloud, data centers, routing, security, and the mobile packet core.You’ll discover new tools and techniques for managing and orchestrating virtualized network devices, and gain new clarity on how {SDN} and {NFV} interact and interrelate. By the time you’re done, you’ll be ready to assess vendor claims, evaluate architectures, and plan {NFV}’s role in your own networks. Understand {NFV}’s key benefits and market drivers Review how virtualization makes {NFV} possible Consider key issues associated with {NFV} network design and deployment Integrate {NFV} into existing network designs Orchestrate, build, and deploy {NFV} networks and cloud services Maximize operational efficiency by building more programmable, automated networks Understand how {NFV} and {SDN} work together Address security, programmability, performance, and service function chaining Preview evolving concepts that will shape {NFV}’s future},
	pagetotal = {368},
	publisher = {Addison-Wesley Professional},
	author = {Chayapathi, Rajendra and Hassan, Syed Farrukh and Shah, Paresh},
	urldate = {2016-12-29},
	date = {2016-11-28},
	langid = {english}
}

@article{mijumbi_network_2016,
	title = {Network Function Virtualization: State-of-the-Art and Research Challenges},
	volume = {18},
	issn = {1553-877X},
	doi = {10.1109/COMST.2015.2477041},
	shorttitle = {Network Function Virtualization},
	abstract = {Network function virtualization ({NFV}) has drawn significant attention from both industry and academia as an important shift in telecommunication service provisioning. By decoupling network functions ({NFs}) from the physical devices on which they run, {NFV} has the potential to lead to significant reductions in operating expenses ({OPEX}) and capital expenses ({CAPEX}) and facilitate the deployment of new services with increased agility and faster time-to-value. The {NFV} paradigm is still in its infancy and there is a large spectrum of opportunities for the research community to develop new architectures, systems and applications, and to evaluate alternatives and trade-offs in developing technologies for its successful deployment. In this paper, after discussing {NFV} and its relationship with complementary fields of software defined networking ({SDN}) and cloud computing, we survey the state-of-the-art in {NFV}, and identify promising research directions in this area. We also overview key {NFV} projects, standardization efforts, early implementations, use cases, and commercial products.},
	pages = {236--262},
	number = {1},
	journaltitle = {{IEEE} Communications Surveys Tutorials},
	author = {Mijumbi, R. and Serrat, J. and Gorricho, J. L. and Bouten, N. and Turck, F. De and Boutaba, R.},
	date = {2016},
	keywords = {capital expenses, Cloud computing, decoupling network functions, future Internet, Hardware, {III}-V semiconductor materials, Indium phosphide, network function virtualization, {NFV} paradigm, operating expenses, {SDN}, Servers, Software, software defined networking, standardization, telecommunication service provisioning, telecommunication services, Tutorials, virtualization, virtual network functions},
	file = {IEEE Xplore Abstract Record:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/V2D3EE3H/7243304.html:text/html;IEEE Xplore Full Text PDF:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/JNRZ2EMV/Mijumbi et al. - 2016 - Network Function Virtualization State-of-the-Art .pdf:application/pdf}
}

@article{li_software_defined_2015,
	title = {Software-Defined Network Function Virtualization: A Survey},
	volume = {3},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2015.2499271},
	shorttitle = {Software-Defined Network Function Virtualization},
	abstract = {Diverse proprietary network appliances increase both the capital and operational expense of service providers, meanwhile causing problems of network ossification. Network function virtualization ({NFV}) is proposed to address these issues by implementing network functions as pure software on commodity and general hardware. {NFV} allows flexible provisioning, deployment, and centralized management of virtual network functions. Integrated with {SDN}, the software-defined {NFV} architecture further offers agile traffic steering and joint optimization of network functions and resources. This architecture benefits a wide range of applications (e.g., service chaining) and is becoming the dominant form of {NFV}. In this survey, we present a thorough investigation of the development of {NFV} under the software-defined {NFV} architecture, with an emphasis on service chaining as its application. We first introduce the software-defined {NFV} architecture as the state of the art of {NFV} and present relationships between {NFV} and {SDN}. Then, we provide a historic view of the involvement from middlebox to {NFV}. Finally, we introduce significant challenges and relevant solutions of {NFV}, and discuss its future research directions by different application domains.},
	pages = {2542--2553},
	journaltitle = {{IEEE} Access},
	author = {Li, Y. and Chen, M.},
	date = {2015},
	keywords = {Computer architecture, Control systems, Hardware, Home appliances, middlebox, network function virtualization, network virtualization, Servers, service chain, Software, Software-defined networks, virtualization},
	file = {IEEE Xplore Abstract Record:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/G8G6SG3Q/7350211.html:text/html;IEEE Xplore Full Text PDF:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/VUQDZFKW/Li and Chen - 2015 - Software-Defined Network Function Virtualization .pdf:application/pdf}
}

@inproceedings{khalid_standardized_2016,
	location = {New York, {NY}, {USA}},
	title = {A Standardized Southbound {API} for {VNF} Management},
	isbn = {978-1-4503-4424-1},
	url = "\url{http://doi.acm.org/2940147.2940156}",
	doi = {2940147.2940156},
	series = {{HotMIddlebox} '16},
	abstract = {Network Function Virtualization ({NFV}) offers network operators great flexibility toward managing network functions, i.e. in-network appliances such as firewalls, load balancers and {NATs}. Several frameworks exist to this end; however {VNF} management is fragmented, and no standard management {API} exists. As a result, each framework uses a proprietary {API} which a network function must support to fully realize its benefits. This lack of standardization is a major barrier in the wider adoption of {NFV}. We propose a standard, framework-agnostic southbound {API} to facilitate faster adoption of {NFV} and enable innovation in the design of both management frameworks and network functions.},
	pages = {38--43},
	booktitle = {Proceedings of the 2016 Workshop on Hot Topics in Middleboxes and Network Function Virtualization},
	publisher = {{ACM}},
	author = {Khalid, Junaid and Coatsworth, Mark and Gember-Jacobson, Aaron and Akella, Aditya},
	urldate = {2016-12-29},
	date = {2016},
	keywords = {Network functions virtualization, service chaining, state management},
	file = {ACM Full Text PDF:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/HCGRM5RC/Khalid et al. - 2016 - A Standardized Southbound API for VNF Management.pdf:application/pdf}
}

@article{abdelwahab_network_2016,
	title = {Network function virtualization in 5G},
	volume = {54},
	issn = {0163-6804},
	doi = {10.1109/MCOM.2016.7452271},
	abstract = {5G wireless technology is paving the way to revolutionize future ubiquitous and pervasive networking, wireless applications, and user quality of experience. To realize its potential, 5G must provide considerably higher network capacity, enable massive device connectivity with reduced latency and cost, and achieve considerable energy savings compared to existing wireless technologies. The main objective of this article is to explore the potential of {NFV} in enhancing 5G radio access networks' functional, architectural, and commercial viability, including increased automation, operational agility, and reduced capital expenditure. The {ETSI} {NFV} Industry Specification Group has recently published drafts focused on standardization and implementation of {NFV}. Harnessing the potential of 5G and network functions virtualization, we discuss how {NFV} can address critical 5G design challenges through service abstraction and virtualized computing, storage, and network resources. We describe {NFV} implementation with network overlay and {SDN} technologies. In our discussion, we cover the first steps in understanding the role of {NFV} in implementing {CoMP}, D2D communication, and ultra densified networks.},
	pages = {84--91},
	number = {4},
	journaltitle = {{IEEE} Communications Magazine},
	author = {Abdelwahab, S. and Hamdaoui, B. and Guizani, M. and Znati, T.},
	date = {2016-04},
	keywords = {5G design, 5G mobile communication, 5G radio access networks, 5G wireless technology, {CoMP}, Computer architecture, D2D communication, energy savings, {ETSI} {NFV} Industry Specification Group, Logic gates, massive device connectivity, network capacity, network function virtualization, network overlay, network resources, pervasive networking, quality of experience, Quality of service, radio access networks, {SDN} technologies, service abstraction, software defined networking, telecommunication power management, ubiquitous computing, ubiquitous networking, ultra densified networks, virtualisation, virtualized computing, Wireless communication},
	file = {IEEE Xplore Abstract Record:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/3AT4P7GR/7452271.html:text/html;IEEE Xplore Full Text PDF:/home/sentinel/.mozilla/firefox/1zn644r0.default-1458466550419/zotero/storage/9HXHIJJF/Abdelwahab et al. - 2016 - Network function virtualization in 5G.pdf:application/pdf}
}

@book{gray_network_2016,
	title = {Network Function Virtualization},
	isbn = {978-0-12-802119-4},
	url = "\url{http://proquestcombo.safaribooksonline.com/book/networking/9780128023433}",
	abstract = {Network Function Virtualization provides an architectural, vendor-neutral level overview of the issues surrounding the large levels of data storage and transmission requirements needed for today's companies, also enumerating the benefits of {NFV} for the enterprise.Drawing upon years of practical experience, and using numerous examples and an easy-to-understand framework, authors Tom Nadeau and Ken Gary discuss the relevancy of {NFV} and how it can be effectively used to create and deploy new services. Readers will learn how to determine if network function virtualization is right for their enterprise network, be able to use hands-on, step-by-step guides to design, deploy, and manage {NFV} in an enterprise, and learn how to evaluate all relevant {NFV} standards, including {ETSI}, {IETF}, Openstack, and Open Daylight.Provides a comprehensive overview of Network Function Virtualization ({NFV})Discusses how to determine if network function virtualization is right for an enterprise {networkPresents} an ideal reference for those interested in {NFV} Network Service Chaining, {NSC} network address translation ({NAT}), firewalling, intrusion detection, domain name service ({DNS}), caching, and software defined {networksIncludes} hands-on, step-by-step guides for designing, deploying, and managing {NFV} in the {enterpriseExplains}, and contrasts, all relevant {NFV} standards, including {ETSI}, {IETF}, Openstack, and Open Daylight},
	pagetotal = {270},
	publisher = {Morgan Kaufmann},
	author = {Gray, Ken and Nadeau, Thomas D.},
	urldate = {2016-12-29},
	date = {2016-07-04},
	langid = {english}
}

@article{bernstein_containers_2014,
	title = {Containers and Cloud: From {LXC} to Docker to Kubernetes},
	volume = {1},
	issn = {2325-6095},
	doi = {10.1109/MCC.2014.51},
	shorttitle = {Containers and Cloud},
	abstract = {This issue's "Cloud Tidbit" focuses on container technology and how it's emerging as an important part of the cloud computing infrastructure. It looks at Docker, an open source project that automates the faster deployment of Linux applications, and Kubernetes, an open source cluster manager for Docker containers.},
	pages = {81--84},
	number = {3},
	journaltitle = {{IEEE} Cloud Computing},
	author = {Bernstein, D.},
	date = {2014-09},
	keywords = {cloud, Cloud computing, containers, Containers, dockers, Google, Home appliances, Linux, Runtime, Virtual machine monitors, virtual machines},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/MCV66A7N/7036275.html:text/html}
}

@article{kamp_jails_2000,
	title = {Jails: Conﬁning the omnipotent root.},
	abstract = {The traditional {UNIX} security model is simple but inexpressive. Adding ﬁne-grained access control improves the expressiveness, but often dramatically increases both the cost of system management and implementation complexity. In environments with a more complex management model, with delegation of some management functions to parties under varying degrees of trust, the base {UNIX} model and most natural extensions are inappropriate at best. Where multiple mutually untrusting parties are introduced, ‘‘inappropriate’’ rapidly transitions to ‘‘nightmarish’’, especially with regards to data integrity and privacy protection.},
	pages = {15},
	author = {Kamp, Poul-Henning and Watson, Robert N M},
	langid = {english},
	date = {2000-05},
	file = {Kamp and Watson - Jails Conﬁning the omnipotent root..pdf:/home/ugurcan/Zotero/storage/XLN74J55/Kamp and Watson - Jails Conﬁning the omnipotent root..pdf:application/pdf}
}

@inproceedings{hwang_component_based_2013,
	title = {A component-based performance comparison of four hypervisors},
	abstract = {Virtualization has become a popular way to make more efficient use of server resources within both private data centers and public cloud platforms. While recent advances in {CPU} architectures and new virtualization techniques have reduced the performance cost of using virtualization, overheads still exist, particularly when multiple virtual machines are competing for resources. We have performed an extensive performance comparison under hardware-assisted virtualization settings considering four popular virtualization platforms, Hyper-V, {KVM}, {vSphere} and Xen, and find that the overheads incurred by each hypervisor can vary significantly depending on the type of application and the resources assigned to it. We also find dramatic differences in the performance isolation provided by different hypervisors. However, we find no single hypervisor always outperforms the others. This suggests that effectively managing hypervisor diversity in order to match applications to the best platform is an important, yet unstudied, challenge.},
	eventtitle = {2013 {IFIP}/{IEEE} International Symposium on Integrated Network Management ({IM} 2013)},
	pages = {269--276},
	booktitle = {2013 {IFIP}/{IEEE} International Symposium on Integrated Network Management ({IM} 2013)},
	author = {Hwang, J. and Zeng, S. and Wu, F. y and Wood, T.},
	date = {2013-05},
	keywords = {Benchmark, Benchmark testing, cloud computing, Cloud Computing, component-based performance comparison, computer architecture, computer centres, {CPU} architectures, Dynamic scheduling, Hardware, hardware-assisted virtualization settings, Hyper-V, Hypervisor, hypervisors, {KVM}, Linux, operating systems (computers), private data centers, public cloud platforms, server resources, Servers, Virtual machine monitors, virtual machines, virtualisation, Virtualization, virtualization techniques, {vSphere}, Xen},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/S7FJMN5J/6572995.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/DFE8AVSC/Hwang et al. - 2013 - A component-based performance comparison of four h.pdf:application/pdf}
}

@misc{nist,
	title = {{SP} 800-145, The {NIST} Definition of Cloud Computing},
	url = "\url{https://csrc.nist.gov/publications/detail/sp/800-145/final}",
	abstract = {Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models, and four deployment models.},
	author = {Mell ({NIST}), Author: Peter and Grance ({NIST}), Author: Tim},
	urldate = {2018-04-20},
	file = {Snapshot:/home/ugurcan/Zotero/storage/EV8PU86H/final.html:text/html}
}

@book{sayfan_mastering_2018,
	edition = {2},
	title = {Mastering Kubernetes},
	isbn = {978-1-78899-997-7},
	url = "\url{http://proquestcombo.safaribooksonline.com/book/operating-systems-and-server-administration/9781788999786}",
	abstract = {Exploit design, deployment, and management of large-scale {containersAbout} This {BookExplore} the latest features available in Kubernetes 1.10Ensure that your clusters are always available, scalable, and up to {dateMaster} the skills of designing and deploying large clusters on various cloud {platformsWho} This Book Is {ForMastering} Kubernetes is for you if you are a system administrator or a developer who has an intermediate understanding of Kubernetes and wish to master its advanced features. Basic knowledge of networking would also be helpful. In all, this advanced-level book provides a smooth pathway to mastering Kubernetes.What You Will {LearnArchitect} a robust Kubernetes cluster for long-time {operationDiscover} the advantages of running Kubernetes on {GCE}, {AWS}, Azure, and bare {metalUnderstand} the identity model of Kubernetes, along with the options for cluster {federationMonitor} and troubleshoot Kubernetes clusters and run a highly available {KubernetesCreate} and configure custom Kubernetes resources and use third-party resources in your automation {workflowsEnjoy} the art of running complex stateful applications in your container {environmentDeliver} applications as standard {packagesIn} {DetailKubernetes} is an open source system that is used to automate the deployment, scaling, and management of containerized applications. If you are running more containers or want automated management of your containers, you need Kubernetes at your disposal. To put things into perspective, Mastering Kubernetes walks you through the advanced management of Kubernetes clusters.To start with, you will learn the fundamentals of both Kubernetes architecture and Kubernetes design in detail. You will discover how to run complex stateful microservices on Kubernetes including advanced features such as horizontal pod autoscaling, rolling updates, resource quotas, and persistent storage backend. Using real-world use cases, you will explore the options for network configuration, and understand how to set up, operate, and troubleshoot various Kubernetes networking plugins. In addition to this, you will get to grips with custom resource development and utilization in automation and maintenance workflows.To scale up your knowledge of Kubernetes, you will encounter some additional concepts based on the Kubernetes 1.10 release, such as Promethus, Role-based access control, {API} aggregation, and more. By the end of this book, you'll know everything you need to graduate from intermediate to advanced level of understanding Kubernetes.Style and {approachDelving} into the design of the Kubernetes platform, the reader will be exposed to Kubernetes advanced features and best practices. This advanced-level book will provide a pathway to mastering Kubernetes.Downloading the example code for this book You can download the example code files for all Packt books you have purchased from your account at http://www.{PacktPub}.com. If you purchased this book elsewhere, you can visit http://www.{PacktPub}.com/support and register to have the files e-mailed directly to you.},
	pagetotal = {468},
	publisher = {Packt Publishing},
	author = {Sayfan, Gigi},
	urldate = {2018-05-07},
	date = {2018-04-27},
	langid = {english}
}

@misc{kube_arch,
        title = {Kubernetes Architecture},
	url = "\url{https://kubernetes.io/docs/concepts/architecture/cloud-controller/}",
	urldate = {2018-05-11},
	file = {:/home/ugurcan/Zotero/storage/XYD5UHNP/cloud-controller.html:text/html}
}

@misc{etsi,
	title = {{ETSI} - Welcome to the World of Standards!},
	url = "\url{http://www.etsi.org/}",
	abstract = {{ETSI} - A European Standards Organization developing World Class Standards in Europe for global use.},
	titleaddon = {{ETSI}},
	urldate = {2018-05-16},
	langid = {english},
	file = {Snapshot:/home/ugurcan/Zotero/storage/45VCB27Y/www.etsi.org.html:text/html}
}

@techreport{ntt_nfv,
	title = {Activities toward NFV Standardization},
	author = {Kurebayashi, R. and Khan, A. and Obana, K.},
	institution = {NTT Docomo},
	date = {2016-07}
}

@mastersthesis{tahir_master,
	title={Design and Implementation of a Testbed for Network Slicing},
	author={Irshad, Tahir},
	year={2018-02-12},
	school={Aalto University},
	language={en},
	pages={54 + 9},
	keyword={network slicing; 5G; MANO; virtualization; orchestration; NFV},
	type={G2 Pro gradu, diplomityö},
	url={http://urn.fi/URN:NBN:fi:aalto-201802231619},
} 

@mastersthesis{haider_md_rezzakul_deployment_2017,
	title = {Deployment of {TOSCA} cloud services archives using Kubernetes},
	abstract = {In recent years container virtualization and container management emerged in the context of Cloud computing as a new paradigm in {IT} enterprises. It introduces new approaches that enable the {IT} industry to manage their application and services more effectively in the Cloud. With the rapid increase of usage of Cloud computing, {IT} companies introduce new tools to manage their applications in Cloud environments. However, each tool has its own kind of definitions and specifications on describing the applications in their platforms which creates vendor lock-in for its users and also hampers the portability features of Cloud applications. To solve this issue, {TOSCA} has been introduced to the industry by {OASIS}. The Topology and Orchestration Specification for Cloud Applications ({TOSCA}) provides a standardization approach enabling portability of Cloud services between different Cloud Computing providers. The main goal of {TOSCA} is to model enterprise applications in a standardized and technology-independent way regardless of a specific Cloud provider or environment. To model and deploy applications using {TOSCA} properly, all required artifacts are packaged and bundled as {TOSCA} Cloud Service Archives ({CSARs}). Such {CSARs} are then used by Cloud orchestration engines to deploy the application to Cloud platforms. At the technology level, several deployment and cluster management approaches and tools are rapidly emerging such as Docker Compose, Docker Swarm, Kubernetes, Nomad, and Apache Mesos. Most of them are centered around containerization of middleware and application components. The focus of this thesis is to provide mapping concepts of {TOSCA} application topologies to a container-based deployment and management approach. Since Kubernetes and Docker are the most prominent open-source solutions in this field, we specifically consider Kubernetes and Docker as part of the prototype implementation. To assess feasibility of the proposed approach and usability of the system, we also provide case studies based on a motivating scenario.},
	publisher = {Universität Stuttgart},
	school = {Universität Stuttgart},
	author = {{Haider, Md. Rezzakul}},
	date = {2017-12-07},
	langid = {english},
	doi = {10.18419/opus-9402}
}

@inproceedings{chen_implementing_2017,
	title = {Implementing {NFV} system with {OpenStack}},
	doi = {10.1109/DESEC.2017.8073806},
	abstract = {Network Function Virtualization ({NFV}) is a promising approach for service providers to reduce {CAPEX} and {OPEX} and has drawn a lot of attention from vendors. Service Function Chaining ({SFC}) provides the ability to define a sequence of network services. This paper identifies two important issues (placement and scaling) on deploying reliably and efficiently {SFC} with a cloud platform. Based on the {OpenStack} Tacker architecture, we explore possible solutions and implement the missing features in Tacker for {SFC}. We propose two algorithms for finding service location and policy of scaling. The experiments show the efficiency of our approach compared with the default deployment methods provided in {OpenStack}. We also discuss and highlight future work to improve utilization of cloud platform for deploying service function chaining.},
	eventtitle = {2017 {IEEE} Conference on Dependable and Secure Computing},
	pages = {188--194},
	booktitle = {2017 {IEEE} Conference on Dependable and Secure Computing},
	author = {Chen, J. and Chen, Y. and Tsai, S. C. and Lin, Y. B.},
	date = {2017-08},
	keywords = {cloud computing, Cloud Computing, cloud platform, default deployment methods, implementing {NFV} system, Network Function Virtualization, network services, {OpenStack}, {OpenStack} Tacker architecture, service function chaining, Service Function Chaining, service location, service providers, {SFC}, software defined networking, Software Defined Networking, virtualisation},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/M3SADJDD/8073806.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/ZJB3RBH9/Chen et al. - 2017 - Implementing NFV system with OpenStack.pdf:application/pdf}
}

@inproceedings{cziva_container-based_2015,
	title = {Container-based network function virtualization for software-defined networks},
	doi = {10.1109/ISCC.2015.7405550},
	abstract = {Today's enterprise networks almost ubiquitously deploy middlebox services to improve in-network security and performance. Although virtualization of middleboxes attracts a significant attention, studies show that such implementations are still proprietary and deployed in a static manner at the boundaries of organisations, hindering open innovation. In this paper, we present an open framework to create, deploy and manage virtual network functions (NF)s in OpenFlow-enabled networks. We exploit container-based NFs to achieve low performance overhead, fast deployment and high reusability missing from today's NFV deployments. Through an SDN northbound API, NFs can be instantiated, traffic can be steered through the desired policy chain and applications can raise notifications. We demonstrate the systems operation through the development of exemplar NFs from common Operating System utility binaries, and we show that container-based NFV improves function instantiation time by up to 68\% over existing hypervisor-based alternatives, and scales to one hundred co-located NFs while incurring sub-millisecond latency.},
	booktitle = {2015 {IEEE} {Symposium} on {Computers} and {Communication} ({ISCC})},
	author = {Cziva, R. and Jouet, S. and White, K. J. S. and Pezaros, D. P.},
	month = jul,
	year = {2015},
	keywords = {computer network performance evaluation, computer network security, container-based network function virtualization, container-based NF, Containers, enterprise networks, function instantiation time, hypervisor-based alternatives, in-network security, middlebox services, Middleboxes, network performance, NFV deployments, Noise measurement, OpenFlow-enabled networks, operating system utility binaries, performance overhead, policy chain, Ports (Computers), Routing, SDN northbound API, Servers, software defined networking, software-defined networks, systems operation, virtual network functions, virtualisation, Virtualization},
	pages = {415--420},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/P2WUAYPX/7405550.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/FM9P56W6/Cziva et al. - 2015 - Container-based network function virtualization fo.pdf:application/pdf}
}

@inproceedings{cziva_sdn-based_2014,
	title = {{SDN}-based {Virtual} {Machine} management for {Cloud} {Data} {Centers}},
	doi = {10.1109/CloudNet.2014.6969026},
	abstract = {Software-Defined Networking (SDN) is an emerging paradigm to logically centralize the network control plane and automate the configuration of individual network elements. At the same time, in Cloud Data Centers (DCs), even though network and server resources converge over the same infrastructure and typically under a single administrative entity, disjoint control mechanisms are used for their respective management. In this paper, we propose a unified server-network control mechanism for converged ICT environments. We present a SDN-based orchestration framework for live Virtual Machine (VM) management where server hypervisors exploit temporal network information to migrate VMs and minimize the network-wide communication cost of the resulting traffic dynamics. A prototype implementation is presented and Mininet is used to evaluate the impact of diverse orchestration algorithms.},
	booktitle = {2014 {IEEE} 3rd {International} {Conference} on {Cloud} {Networking} ({CloudNet})},
	author = {Cziva, R. and Stapleton, D. and Tso, F. P. and Pezaros, D. P.},
	month = oct,
	year = {2014},
	keywords = {cloud computing, cloud data centers, Communication Cost, computer centres, computer networks, Consolidation, Control systems, converged ICT environments, Data Center Network, IP networks, Mininet, Network topology, network-wide communication cost, orchestration algorithms, Resource management, SDN-based orchestration framework, server hypervisors, Servers, software defined networking, Software Defined Networking, telecommunication traffic, temporal network information, Topology, traffic dynamics, unified server-network control mechanism, Virtual Machine Live Migration, virtual machine management, Virtual machine monitors, virtual machines, VM management},
	pages = {388--394},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/M9AI3BMF/6969026.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/NKWDWNTW/Cziva et al. - 2014 - SDN-based Virtual Machine management for Cloud Dat.pdf:application/pdf}
}

@article{cziva_container_2017,
	title = {Container {Network} {Functions}: {Bringing} {NFV} to the {Network} {Edge}},
	volume = {55},
	issn = {0163-6804},
	shorttitle = {Container {Network} {Functions}},
	doi = {10.1109/MCOM.2017.1601039},
	abstract = {In order to cope with the increasing network utilization driven by new mobile clients, and to satisfy demand for new network services and performance guarantees, telecommunication service providers are exploiting virtualization over their network by implementing network services in virtual machines, decoupled from legacy hardware accelerated appliances. This effort, known as NFV, reduces OPEX and provides new business opportunities. At the same time, next generation mobile, enterprise, and IoT networks are introducing the concept of computing capabilities being pushed at the network edge, in close proximity of the users. However, the heavy footprint of today's NFV platforms prevents them from operating at the network edge. In this article, we identify the opportunities of virtualization at the network edge and present Glasgow Network Functions (GNF), a container-based NFV platform that runs and orchestrates lightweight container VNFs, saving core network utilization and providing lower latency. Finally, we demonstrate three useful examples of the platform: IoT DDoS remediation, on-demand troubleshooting for telco networks, and supporting roaming of network functions.},
	number = {6},
	journal = {IEEE Communications Magazine},
	author = {Cziva, R. and Pezaros, D. P.},
	year = {2017},
	keywords = {Cloud computing, container network functions, container-based NFV platform, Containers, Glasgow network functions, IoT DDoS remediation, Linux, Logic gates, mobile clients, mobile communication, Mobile communication, Mobile computing, next generation mobile networks, next generation networks, on-demand troubleshooting, telecommunication service providers, virtual machines, Virtualization},
	pages = {24--31},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/LKN9UPMD/7945849.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/FPSAXYZ2/Cziva and Pezaros - 2017 - Container Network Functions Bringing NFV to the N.pdf:application/pdf}
}

@inproceedings{cziva_gnfc_2015,
	title = {{GNFC}: {Towards} network function cloudification},
	shorttitle = {{GNFC}},
	doi = {10.1109/NFV-SDN.2015.7387419},
	abstract = {An increasing demand is seen from enterprises to host and dynamically manage middlebox services in public clouds in order to leverage the same benefits that network functions provide in traditional, in-house deployments. However, today's public clouds provide only a limited view and programmability for tenants that challenges flexible deployment of transparent, software-defined network functions. Moreover, current virtual network functions can't take full advantage of a virtualized cloud environment, limiting scalability and fault tolerance. In this paper we review and evaluate the current infrastructural limitations imposed by public cloud providers and present the design and implementation of GNFC, a cloud-based Network Function Virtualization (NFV) framework that gives tenants the ability to transparently attach stateless, container-based network functions to their services hosted in public clouds. We evaluate the proposed system over three public cloud providers (Amazon EC2, Microsoft Azure and Google Compute Engine) and show the effects on end-to-end latency and throughput using various instance types for NFV hosts.},
	booktitle = {2015 {IEEE} {Conference} on {Network} {Function} {Virtualization} and {Software} {Defined} {Network} ({NFV}-{SDN})},
	author = {Cziva, R. and Jouet, S. and Pezaros, D. P.},
	month = nov,
	year = {2015},
	keywords = {Amazon EC2, cloud computing, Cloud computing, cloud-based network function virtualization framework, fault tolerance, GNFC, Google Compute Engine, IP networks, Microsoft Azure, middlebox service management, Middleboxes, network function cloudification, NFV framework, Protocols, public cloud providers, stateless container-based network functions, transparent software-defined network functions, Tunneling, virtual network functions, virtualisation, virtualized cloud environment},
	pages = {142--148},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/ASJVAU55/7387419.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/LG77NGL6/Cziva et al. - 2015 - GNFC Towards network function cloudification.pdf:application/pdf}
}

@article{gonzalez_dependability_2018,
	title = {Dependability of the {NFV} {Orchestrator}: {State} of the {Art} and {Research} {Challenges}},
	shorttitle = {Dependability of the {NFV} {Orchestrator}},
	doi = {10.1109/COMST.2018.2830648},
	abstract = {The introduction of Network Function Virtualisation (NFV) represents a significant change in networking technology, which may create new opportunities in terms of cost efficiency, operations, and service provisioning. Although not explicitly stated as an objective, the dependability of the services provided using this technology should be at least as good as conventional solutions. Logical centralisation, off-the-shelf computing platforms, and increased system complexity represent new dependability challenges relative to the state of the art. The core function of the network, with respect to failure and service management, is orchestration. The failure and misoperation of the NFV Orchestrator (NFVO) will have huge network-wide consequences. At the same time, NFVO is vulnerable to overload and design faults. Thus, the objective of this paper is to give a tutorial on the dependability challenges of the NFVO, and to give insight into the required future research. This paper provides necessary background information, reviews the available literature, outlines the proposed solutions, and identifies some design and research problems that must be addressed.},
	journal = {IEEE Communications Surveys Tutorials},
	author = {Gonzalez, A. J. and Nencioni, G. and Kamisiński, A. and Helvik, B. E. and Heegaard, P. E.},
	year = {2018},
	keywords = {Cloud Computing., Computer architecture, Environmental management, Fault tolerance, Fault Tolerance, Fault tolerant systems, Hardware, MANO Resilience, NFV, NFV Dependability, NFV MANO, NFV Orchestrator, NFV Reliability, Tutorials},
	pages = {1--1},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/W8HFZFI3/8350296.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/R8XBLGMJ/Gonzalez et al. - 2018 - Dependability of the NFV Orchestrator State of th.pdf:application/pdf}
}

@inproceedings{imagane_performance_2018,
	title = {Performance evaluations of multimedia service function chaining in edge clouds},
	doi = {10.1109/CCNC.2018.8319249},
	abstract = {As mobile multimedia services have significantly evolved and diversified with the spread of smartphones and Internet of Things (IoT) devices, low-delay multimedia cloud computing is the need of the hour. To address this demand, in this study, we introduce an edge cloud system that equips a multimedia service function chaining capability. A prototype implementation of the proposed edge cloud system has three main features: 1) edge computing deployment by using OpenStack, 2) multimedia service slicing and chaining, and 3) efficient resource management in edge networks. Based on these features, the proposed system achieves lower multimedia processing delay compared to a conventional cloud computing platform. We deploy the proposed system in our laboratory and validate the system performance by using typical multimedia application, such as human detection in video surveillance.},
	booktitle = {2018 15th {IEEE} {Annual} {Consumer} {Communications} {Networking} {Conference} ({CCNC})},
	author = {Imagane, K. and Kanai, K. and Katto, J. and Tsuda, T. and Nakazato, H.},
	month = jan,
	year = {2018},
	keywords = {cloud computing, Cloud computing, conventional cloud computing platform, edge cloud system, Edge computing, edge networks, efficient resource management, Image edge detection, Internet of Things, Internet of Things devices, low-delay multimedia, low-delay multimedia cloud computing, mobile computing, mobile multimedia services, multimedia application, multimedia communication, Multimedia communication, multimedia computing, Multimedia computing, Multimedia processing, multimedia processing delay, multimedia service function chaining capability, multimedia service slicing, Multimedia service slicing, OpenStack, performance evaluations, Resource management, Service function chaining, smartphones, Streaming media, system performance, video surveillance},
	pages = {1--4},
	file = {IEEE Xplore Abstract Record:/home/ugurcan/Zotero/storage/TBQTN2N9/8319249.html:text/html;IEEE Xplore Full Text PDF:/home/ugurcan/Zotero/storage/8IENTLZY/Imagane et al. - 2018 - Performance evaluations of multimedia service func.pdf:application/pdf}
}

@article{marmol_networking_2015,
	title = {Networking in containers and container clusters},
	journal = {Proceedings of netdev 0.1},
	author = {Marmol, Victor and Jnagal, Rohit and Hockin, Tim},
	month = feb,
	year = {2015}
}